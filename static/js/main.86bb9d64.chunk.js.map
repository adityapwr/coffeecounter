{"version":3,"sources":["Counter.js","App.js","serviceWorker.js","index.js","coffee-mug.png"],"names":["Counter","_ref","_this","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeCount","setState","prevState","count","today","Date","localStorage","setItem","state","clearCounter","removeItem","parseInt","date","react_default","a","createElement","className","alt","onClick","src","coffee","Component","App","src_Counter","getItem","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.86bb9d64.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport coffee from './coffee-mug.png';\r\n\r\nclass Counter extends Component {\r\n  constructor({props}) {\r\n    super({props});\r\n    this.state= {\r\n     count: parseInt(props.count),\r\n     today : props.date,\r\n    }\r\n  }\r\n\r\n  changeCount = () => {\r\n    this.setState((prevState, props) => ({\r\n      count: prevState.count + 1\r\n  }));\r\n  this.setState({today:new Date()})\r\n  localStorage.setItem('date',new Date());\r\n  localStorage.setItem('coffeeCount',this.state.count+1);\r\n  }\r\n\r\n  clearCounter = () => {\r\n    this.setState({count:0})\r\n    localStorage.removeItem('coffeeCount');\r\n    localStorage.removeItem('date');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Content\">\r\n        <div className=\"coffeeMug\" >\r\n          <img alt=\"coffee-mug\" onClick={this.changeCount} src={coffee} />\r\n        </div>\r\n        <div className=\"counter\">\r\n        {this.state.count}\r\n        </div> \r\n        <div className=\"clearCount\">\r\n        <span onClick={this.clearCounter}>Reset</span>\r\n        <p>Last Coffee at:{this.today}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// { this.state.today.getHours() + \":\" + this.state.today.getMinutes() + \":\" + this.state.today.getSeconds()}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Counter from \"./Counter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>Coffee Counter</header>\n      <Counter props={getCount()} />\n    </div>\n  );\n}\n\nfunction getCount() {\n  if (localStorage.getItem(\"coffeeCount\") === null) {\n    return { count: \"0\", date: new Date() };\n  } else {\n    return {\n      count: localStorage.getItem(\"coffeeCount\"),\n      date: localStorage.getItem(\"date\")\n    };\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/coffee-mug.64e2d61c.png\";"],"sourceRoot":""}